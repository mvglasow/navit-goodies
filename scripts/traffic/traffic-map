#!/bin/bash

# This script runs a test suite of traffic messages and stores their output for comparison.
# Traffic test data must reside in the current directory, and Navit must be running prior to launching
# this script.

# BUGS: Makes some assumptions on XML formatting (no line breaks within a tag, double quotes, single space as
# whitespace) and may break on unexpected (yet formally correct) formats.

# The source dir, into which you checked out the Navit source code.
srcdir=$HOME/src/navit

# The root of the working directory tree.
# In the default config, it is the root for builddir and testcases. It is not used anywhere else.
# You can choose this arbitrarily.
buildroot=$HOME/workspaces/navit

# The build directory, i.e. directory which will hold the binary tree for the platform.
# You can choose this arbitrarily.
builddir=$buildroot/linux-builddir

# The directory in which the compiled Navit binary will be found.
# In most cases this does not need to be modified.
#bindir=$builddir/navit
bindir=$HOME/src/navit/build/Debug/navit

# The Navit configuration file to use.
# Leave this empty to use the default Navit config in bindir.
config=$HOME/src/navit-goodies/config/linux/navit_gpsd.xml

# The directory in which test output (GPX files) will be stored.
# You can choose this arbitrarily.
datadir=$HOME/workspaces/navit/testdata

# The path to the test case specification.
# This should be a path to a text file containing one line for each test case in the following format:
# name start_longitude start_latitude dest_longitude dest_latitude
# Separate parameters with spaces.
testcases=$HOME/src/navit-goodies/scripts/traffic/traffic-map-testcases.txt


interactive=0
sleep=15

if [[ "$1" == "-i" ]]; then
    interactive=1
elif [[ "$1" == "-l" ]]; then
    sleep=300
elif [[ -n "$@" ]]; then
    echo "Usage: $0 [-i|-l]"
    echo "-i  Interactive (do not wait but prompt after every step)"
    echo "-l  Long delays (for testing with Valgrind)"
    exit 0
fi


# TODO check for presence of xmlstarlet

# Uncomment the following to start Navit manually.
#cd $bindir
#./navit $config 2>/dev/null &

# give Navit time to start up
#sleep 10

while read testcase;
do
	# skip comment and empty lines
	[[ "$testcase" =~ \#.* ]] && continue
	[[ -z $testcase ]] && continue
	
    # update external entities for timestamps
    now=`date -Iseconds`
    later=`date -Iseconds --date="20 minutes"`
    echo -e "<!ENTITY now \"$now\">\n<!ENTITY later \"$later\">\n" > traffic_entities.xml.inc

    echo -e "\nTesting $testcase"
    # prepare feed with current timestamps
    echo "Preparing feed..."
	xmlstarlet c14n $testcase.xml  > /tmp/$testcase.xml

	# inject traffic messages
	echo "Sending traffic feed..."
	dbus-send --session --type=method_call --print-reply --dest=org.navit_project.navit /org/navit_project/navit/default_navit org.navit_project.navit.navit.traffic_inject string:"/tmp/$testcase.xml" >/dev/null
	# for now we have to use sleep
    if [ $interactive -gt 0 ]; then
        echo "When log output has stopped, press [ENTER] to continue"
        read -s < /dev/tty
    else
	    sleep $sleep
    fi
	dbus-send --session --type=method_call --print-reply --dest=org.navit_project.navit /org/navit_project/navit/default_navit org.navit_project.navit.navit.traffic_export string:"$datadir/traffic-map-$testcase.gpx" >/dev/null
	# for now we have to use sleep
    if [ $interactive -gt 0 ]; then
        echo "When log output has stopped, press [ENTER] to continue"
        read -s < /dev/tty
    else
	    sleep $sleep
    fi

    # check for presence of message IDs in message store and GPX
    grep " id=" /tmp/$testcase.xml | sed "s/.* id=\"\([^\"]*\)\".*/\1/" | while read msgid;
    do
        grep " id=\"$msgid\"" $bindir/traffic.xml > /dev/null && { grep "<rte><type>.*</type><name>$msgid</name>" $datadir/traffic-map-$testcase.gpx > /dev/null || echo "*** Message $msgid has no associated segments!"; } || echo "*** Message $msgid not found in persistent storage!"
    done
	
	# inject cancellation messages
	echo "Sending cancellation for traffic feed..."
    echo -e "<feed>" > /tmp/$testcase-cancel.xml
    grep " id=" /tmp/$testcase.xml | sed "s/.* id=\"\([^\"]*\)\".*/\1/" | while read msgid;
    do
        echo -e "  <message id=\"$msgid\" cancellation=\"true\" receive_time=\"$now\" update_time=\""`date -Iseconds`"\" expiration_time=\""`date -Iseconds --date="20 minutes"`"\">\n  </message>" >> /tmp/$testcase-cancel.xml
    done
    echo -e "</feed>" >> /tmp/$testcase-cancel.xml

	dbus-send --session --type=method_call --print-reply --dest=org.navit_project.navit /org/navit_project/navit/default_navit org.navit_project.navit.navit.traffic_inject string:"/tmp/$testcase-cancel.xml" >/dev/null
	# for now we have to use sleep
    if [ $interactive -gt 0 ]; then
        echo "When log output has stopped, press [ENTER] to continue"
        read -s < /dev/tty
    else
	    sleep $sleep
    fi

    # check for presence of message IDs in message store
    grep " id=" /tmp/$testcase.xml | sed "s/.* id=\"\([^\"]*\)\".*/\1/" | while read msgid;
    do
        grep " id=\"$msgid\"" $bindir/traffic.xml > /dev/null && echo "*** Message $msgid is still in persistent storage!"
    done

	echo "$testcase: done"
done < $testcases

